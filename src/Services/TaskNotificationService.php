<?php

namespace App\Services;

use App\Notifications\Telegram;
use App\Database\DB;

class TaskNotificationService
{
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
     */
    public static function notifyTaskCreated(array $task, string $assigneeName = '', ?string $assigneeTg = null): void
    {
        $title = htmlspecialchars($task['title'] ?? '', ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');
        $descRaw = (string)($task['description'] ?? '');
        $desc = $descRaw !== '' ? htmlspecialchars($descRaw, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') : '';
        $assigneeLine = $assigneeName !== '' ? "\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {$assigneeName}" : '';
        $descLine = $desc !== '' ? "\n–û–ø–∏—Å–∞–Ω–∏–µ: {$desc}" : '';
        $msg = "üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: <b>{$title}</b>{$descLine}{$assigneeLine}\n–°—Ç–∞—Ç—É—Å: {$task['status']}\nID: {$task['id']}";
        Telegram::send($msg);
        if ($assigneeTg) {
            Telegram::sendTo($assigneeTg, $msg);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
     */
    public static function notifyCommentAdded(int $taskId, string $commentText, ?string $assigneeTg = null): void
    {
        $msg = "üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ #{$taskId}:\n" . $commentText;
        Telegram::send($msg);
        if ($assigneeTg) {
            Telegram::sendTo($assigneeTg, $msg);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    public static function notifyStatusChanged(int $taskId, string $status, string $title, string $description = '', string $assigneeName = '', ?string $assigneeTg = null): void
    {
        $titleEsc = htmlspecialchars($title, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');
        $descEsc = $description !== '' ? htmlspecialchars($description, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') : '';
        $assigneeLine = $assigneeName !== '' ? "\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {$assigneeName}" : '';
        $descLine = $descEsc !== '' ? "\n–û–ø–∏—Å–∞–Ω–∏–µ: {$descEsc}" : '';
        $msg = "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ #{$taskId}: <b>{$status}</b>\n<b>{$titleEsc}</b>{$descLine}{$assigneeLine}";
        Telegram::send($msg);
        if ($assigneeTg) {
            Telegram::sendTo($assigneeTg, $msg);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
     */
    public static function notifyUrgencyChanged(int $taskId, string $urgency, string $title, string $description = ''): void
    {
        $titleEsc = htmlspecialchars($title, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');
        $descEsc = $description !== '' ? htmlspecialchars($description, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') : '';
        $descLine = $descEsc !== '' ? "\n–û–ø–∏—Å–∞–Ω–∏–µ: {$descEsc}" : '';
        $msg = "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ #{$taskId}: <b>{$urgency}</b>\n<b>{$titleEsc}</b>{$descLine}";
        Telegram::send($msg);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ
     */
    public static function notifyDeadline(int $taskId, string $title, string $timeLeft, ?string $assigneeTg = null): void
    {
        if (str_contains($timeLeft, '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ')) {
            $msg = "‚õî –ó–∞–¥–∞—á–∞ #{$taskId} ({$title}) ‚Äî {$timeLeft}";
        } else {
            $msg = "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #{$taskId} ({$title}) ‚Äî –¥–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {$timeLeft}";
        }
        if (str_contains($timeLeft, '–ü—Ä–∏–º–∏—Ç–µ –∑–∞–¥–∞—á—É')) {
            $msg = "‚ö†Ô∏è {$timeLeft} #{$taskId}";
        }
        Telegram::send($msg);
        if ($assigneeTg) {
            Telegram::sendTo($assigneeTg, $msg);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å telegram_id –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ taskId
     */
    public static function getAssigneeTg(int $taskId): ?string
    {
        $pdo = DB::conn();
        $st = $pdo->prepare('SELECT u.telegram_id FROM tasks t LEFT JOIN users u ON u.id=t.assigned_user_id WHERE t.id=?');
        $st->execute([$taskId]);
        return $st->fetchColumn() ?: null;
    }
}
